#version 430 core

// Define the size of a work group.
// For a 2D problem like image processing, we use a 2D group (e.g., 8x8 threads).
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Declare the output texture. We bind it to image unit 0.
// 'rgba32f' specifies the format. 'writeonly' indicates we will only write to it.
layout (binding = 0, rgba32f) uniform writeonly image2D destTex;

// Uniforms can be passed in just like with other shaders.
uniform float u_time;

void main() {
    // gl_GlobalInvocationID is the unique ID of the current thread in the entire dispatch.
    // It gives us the (x, y) coordinate of the pixel we should write to.
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    // Get the size of the texture we are writing to.
    vec2 size = imageSize(destTex);

    // Prevent writing out of bounds if the texture size is not a multiple of the work group size.
    if (pixel_coords.x >= size.x || pixel_coords.y >= size.y) {
        return;
    }

    // Calculate a normalized UV coordinate [0, 1]
    vec2 uv = vec2(pixel_coords) / size;

    // Generate a simple procedural color pattern based on time and coordinates.
    float r = 0.5 + 0.5 * sin(uv.x * 10.0 + u_time);
    float g = 0.5 + 0.5 * sin(uv.y * 10.0 + u_time);
    float b = 0.5 + 0.5 * cos(u_time * 0.7);

    vec4 pixel_color = vec4(r, g, b, 1.0);

    // Write the final color to the texture at the specified coordinate.
    imageStore(destTex, pixel_coords, pixel_color);
}
